
name: Flutter CI/CD with Telegram

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17.0.10'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.1'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Get version info
        id: version
        run: |
          echo "VERSION=$(grep 'version:' pubspec.yaml | cut -d ' ' -f 2)" >> $GITHUB_OUTPUT
          echo "COMMIT_MSG=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

      - name: Send APK to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -F chat_id="${TELEGRAM_CHAT_ID}" \
               -F document=@"build/app/outputs/flutter-apk/app-release.apk" \
               -F caption="üöÄüöÄüöÄüöÄ New Build Available " \
               https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument

      - name: Send notification
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="‚úÖ Success"
          else
            STATUS="‚ùå Failed"
          fi
          
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
               -d chat_id="${TELEGRAM_CHAT_ID}" \


  build-web:
    name: Build Web App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.1'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Web
        run: flutter build web --release

      - name: Get version info
        id: version
        run: |
          echo "VERSION=$(grep 'version:' pubspec.yaml | cut -d ' ' -f 2)" >> $GITHUB_OUTPUT
          echo "COMMIT_MSG=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

      - name: Archive Web Build
        run: |
          cd build/web
          zip -r ../../web-build.zip .
          cd ../..
          ls -lh web-build.zip

      - name: Send Web Build to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "‚ö†Ô∏è Telegram secrets not set. Skipping notification."
            exit 0
          fi
          
          echo "‚úÖ Sending Web build to Telegram..."
          
          RESPONSE=$(curl -F chat_id="${TELEGRAM_CHAT_ID}" \
               -F document=@"web-build.zip" \
               -F caption="üåêüåêüåê Web Build" \
               https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument)
          
          if echo "$RESPONSE" | grep -q '"ok":true'; then
            echo "‚úÖ Successfully sent Web build to Telegram!"
          else
            echo "‚ùå Failed to send to Telegram: $RESPONSE"
            exit 1
          fi
      - name: Send notification
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="‚úÖ Success"
          else
            STATUS="‚ùå Failed"
          fi
          
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
               -d chat_id="${TELEGRAM_CHAT_ID}" \


#
#  build-windows:
#    name: Build Windows App
#    runs-on: windows-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Setup Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          flutter-version: '3.24.0'
#          channel: 'stable'
#
#      - name: Install dependencies
#        run: flutter pub get
#
#      - name: Build Windows
#        run: flutter build windows --release
#
#      - name: Get version info
#        id: version
#        shell: bash
#        run: |
#          echo "VERSION=$(grep 'version:' pubspec.yaml | cut -d ' ' -f 2)" >> $GITHUB_OUTPUT
#          echo "COMMIT_MSG=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
#
#      - name: Remove unnecessary files
#        shell: powershell
#        run: |
#          Remove-Item -Recurse -Force build/windows/x64/runner/Release/*.pdb -ErrorAction SilentlyContinue
#          Remove-Item -Recurse -Force build/windows/x64/runner/Release/*.exp -ErrorAction SilentlyContinue
#          Remove-Item -Recurse -Force build/windows/x64/runner/Release/*.lib -ErrorAction SilentlyContinue
#
#      - name: Archive Windows Build
#        shell: powershell
#        run: |
#          Compress-Archive -Path build/windows/x64/runner/Release/* -DestinationPath windows-build.zip
#          Get-Item windows-build.zip | Select-Object Name, Length
#
#      - name: Send Windows Build to Telegram
#        shell: bash
#        env:
#          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
#          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
#        run: |
#          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
#            echo "‚ö†Ô∏è Telegram secrets not set. Skipping notification."
#            exit 0
#          fi
#
#          echo "‚úÖ Sending Windows build to Telegram..."
#
#          RESPONSE=$(curl -F chat_id="${TELEGRAM_CHAT_ID}" \
#               -F document=@"windows-build.zip" \
#               -F caption="ü™ü Windows Build%0AVersion: ${{ steps.version.outputs.VERSION }}%0ACommit: ${{ steps.version.outputs.COMMIT_MSG }}%0ABranch: ${GITHUB_REF##*/}%0AArchitecture: x64" \
#               https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument)
#
#          if echo "$RESPONSE" | grep -q '"ok":true'; then
#            echo "‚úÖ Successfully sent Windows build to Telegram!"
#          else
#            echo "‚ùå Failed to send to Telegram: $RESPONSE"
#            exit 1
#          fi

#  notify-completion:
#    name: Send Summary
#    runs-on: ubuntu-latest
#    needs: [ build-android, build-web, build-windows ]
#    if: always()
#
#    steps:
#      - name: Send completion notification
#        env:
#          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
#          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
#        run: |
#          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
#            echo "‚ö†Ô∏è Telegram secrets not set. Skipping notification."
#            exit 0
#          fi
#
#          # Determine overall status
#          if [ "${{ needs.build-android.result }}" == "success" ] && \
#             [ "${{ needs.build-web.result }}" == "success" ] && \
#             [ "${{ needs.build-windows.result }}" == "success" ]; then
#            STATUS="‚úÖ All Builds Successful!"
#            EMOJI="üéâ"
#          else
#            STATUS="‚ö†Ô∏è Build Summary"
#            EMOJI="üìä"
#          fi
#
#          # Build status emojis
#          ANDROID_STATUS="${{ needs.build-android.result }}"
#          WEB_STATUS="${{ needs.build-web.result }}"
#          WINDOWS_STATUS="${{ needs.build-windows.result }}"
#
#          case "$ANDROID_STATUS" in
#            "success") ANDROID_EMOJI="‚úÖ" ;;
#            "failure") ANDROID_EMOJI="‚ùå" ;;
#            *) ANDROID_EMOJI="‚ö†Ô∏è" ;;
#          esac
#
#          case "$WEB_STATUS" in
#            "success") WEB_EMOJI="‚úÖ" ;;
#            "failure") WEB_EMOJI="‚ùå" ;;
#            *) WEB_EMOJI="‚ö†Ô∏è" ;;
#          esac
#
#          case "$WINDOWS_STATUS" in
#            "success") WINDOWS_EMOJI="‚úÖ" ;;
#            "failure") WINDOWS_EMOJI="‚ùå" ;;
#            *) WINDOWS_EMOJI="‚ö†Ô∏è" ;;
#          esac
#
#          # Build message
#          MESSAGE="${EMOJI} ${STATUS}%0A%0A"
#          MESSAGE="${MESSAGE}üì± Android: ${ANDROID_EMOJI} ${ANDROID_STATUS}%0A"
#          MESSAGE="${MESSAGE}üåê Web: ${WEB_EMOJI} ${WEB_STATUS}%0A"
#          MESSAGE="${MESSAGE}ü™ü Windows: ${WINDOWS_EMOJI} ${WINDOWS_STATUS}%0A%0A"
#          MESSAGE="${MESSAGE}üì¶ Repository: ${{ github.repository }}%0A"
#          MESSAGE="${MESSAGE}üåø Branch: ${GITHUB_REF##*/}%0A"
#          MESSAGE="${MESSAGE}üë§ Author: ${{ github.actor }}%0A"
#          MESSAGE="${MESSAGE}üîó Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
#
#          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
#               -d chat_id="${TELEGRAM_CHAT_ID}" \
#               -d parse_mode="HTML" \
#               -d text="${MESSAGE}"
#
#          echo "‚úÖ Summary notification sent!"
